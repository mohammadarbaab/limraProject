# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

 
./lch_logo.PNG
 
admin_logo.svg
 
GreatStack
 
greatstackdev
 
1-212-456-7890
 
 Lorem Ipsum is simply dummy text of the printing and typesetting
            industry. Lorem Ipsum has been the industry's standard dummy text
            ever since the 1500s, when an unknown printer took a galley of type
            and scrambled it to make a type specimen book.
 
 Lorem Ipsum is simply dummy text of the printing and typesetting
            industry. Lorem Ipsum has been the industry's standard dummy text
            ever since the 1500s, when an unknown printer took a galley of type
            and scrambled it to make a type specimen book.
 
 Lorem Ipsum is simply dummy text of the printing and typesetting
            industry. Lorem Ipsum has been the industry's standard dummy text
            ever since the 1500s, when an unknown printer took a galley of type
            and scrambled it to make a type specimen book.
 
#800080
 
./doc-header-img.png
 
./assests/assest
 
bg-blue-50
 

  lch_logo,
 

import lch_logo from "../assests/lch_logo.PNG"
 
bg-indigo-100 text-black
 
bg-indigo-100 text-black
 
bg-indigo-100 text-black
 
bg-indigo-100 text-black
 
bg-indigo-100 text-black
 
indigo-100
 
5f6FFF
 
"#5f6FFF
 
, // Black color hex code
 
colors: {
        primary: "#5f6FFF",
      },
 
 colors: {
        primary: "#5F6FFF",
      }
 
imageUpload
 
uploadImageToCloudinary
 
else{

    }
 
if(token_decoded !== process.env.User_EMAIL + process.env.User_PASSWORD){
        return res.status(401).json({success:false,msg:"Unauthorized"});
    }
 
atoken
 
admin
 

      toast
 
data.messsage
 
() => setToken(false)
 
useCallback
 

          alert('Sign up success')
 

      return res.json({ success: false, message: "Invalid Password" });
 
module.exports=userRouter;
 

import { isJWT } from "validator";
 
await User.create({
 
isStrongPassword(password))
 
 const fetchDocInfo = async () => {
    const doctorId = Number(docId);
    const docInfo = doctors.find((doc) => doc._id === doctorId);
    setDocInfo(docInfo);
    console.log(docInfo);
  };
 

  useEffect(() => {
    // `docSlots` ko update karne ke baad console.log
    console.log("Updated docSlots:", docSlots);
  }, [docSlots]);
 

  // fetch doctors info
  const fetchDocInfo = async () => {
    const doctorId = Number(docId);
    const docInfo = doctors.find((doc) => doc._id === doctorId);
    setDocInfo(docInfo);
    console.log(docInfo);
  };
  // Doctors
  useEffect(() => {
    fetchDocInfo();
  }, [doctors, docId]);
 


  // fetch doctors info
  const fetchDocInfo = async () => {
    const doctorId = Number(docId);
    const docInfo = doctors.find((doc) => doc._id === doctorId);
    setDocInfo(docInfo);
    console.log(docInfo);
  };
  // Doctors
  useEffect(() => {
    fetchDocInfo();
  }, [doctors, docId]);
 
 useEffect(()=>{
    console.log("this is appointment doctors console",doctors)
  },[doctors])
 

  console.log("this is docid",docId)
 

    console.log("doctors appoint",doctors)
 
BACKEND_URL
 
BACKEND_URL=http://localhost:4000
 

require('dotenv').config();
 
REACT_APP_
 



// import { createContext } from "react";
// import { doctors } from "../assests/assest";

// export const AppContext = createContext();

// const AppContextProvider = (props) => {
//   const currencySymbol = "$";
//   const value = {
//     doctors,
//     currencySymbol
//   };

//   return (
//     <AppContext.Provider value={value}>{props.children}</AppContext.Provider>
//   );
// };

// export default AppContextProvider;
 
.select(["-password", "-email"]);
 
BACKEND_URL
 
const { data } = await axios.get(backendUrl + "/api/doctor/list");
 

      console.log("data comes",data)
 
REACT_APP_
 
REACT_APP_
 
axios.get(backendUrl + "/api/doctor/list");
 

  const backendUrl = process.env.BACKEND_URL || "default-url"; // Agar BACKEND_URL nahi hai to 'default-url' use karo
 

  const backendUrl = process.env.BACKEND_URL || "default-url"; // Agar BACKEND_URL nahi hai to 
 
BACKEND_URL= http://localhost:4000
 
backendUrl + "/api/doctor/list"
 
{toast} from 'rea'
 
toastify
 
const backendUrl = import.meta.env.BACKEND_URL
 
VITE_
 
VITE_
 
import.meta.env.VITE_BACKEND_URL;
 
TE_BACKEND_URL
 
| 'default_value';
 

  const backendUrl = import.meta.env.VITE_BACKEND_URL;
 

  console.log(backendUrl);
 
backendURL
 

  const backendURL = import.meta.env.VITE_BACKEND_URL
 

import VITE_BACKEND_URL from 'e'
 

import { doctors } from "../assests/assest";
 
`${backendURL}/doctors`
 
response
 

                  <p className="bg-gray-700 w-5 text-black"> {item.available}</p>
 
const changeAvailability = async (docId) => {
  try {
    const { data } = await axios.post(
      backendUrl + "/api/admin/change-availability",
      { docId },
      { headers: { aToken } }
    );

    if (data.success) {
      // Update doctors in context after success
      setDoctors(prevDoctors =>
        prevDoctors.map(doctor =>
          doctor._id === docId ? { ...doctor, available: !doctor.available } : doctor
        )
      );
    } else {
      toast.error("Error");
    }
  } catch (error) {
    toast.error(error.message);
  }
};
 
// Inside your component
  useEffect(() => {
    console.log(doctors); // Jab bhi doctors state update hoga, yeh console mein log karega
  }, [doctors]); // Dependency array, isme 'doctors' ko daalne se jab bhi doctors update hoga, tab yeh effect run karega.

 
const changeAvailability = async (docId) => {
    try {
      const { data } = await axios.post(
        backendUrl + "/api/admin/change-availability",
        { docId },
        { headers: { aToken } }
      );
      if (data.success) {
        toast.success(data.message);
        getAllDoctors();
      } else {
        toast.error("error");
      }
    } catch (error) {
      toast.error(error.message);
    }
  }
 

                <p className="text-black bgg">{item.id}</p>
 
checked={item.available}
 
"succesfully"
 
available
 
available
 

const changeAvailablity = async (req, res) => {
  try {
    const { docId } = req.body;
    const docData = await doctorModel.findById(docId);

    // Check if doctor data exists
    if (!docData) {
      return res.status(400).json({ success: false, message: "Doctor not found" });
    }

    await doctorModel.findByIdAndUpdate(docId, {
      available: !docData.available,
    });

    res.json({ success: true, message: "Availability changed successfully" });
  } catch (error) {
    console.error("Error in changeAvailablity:", error);
    res.status(500).json({ success: false, message: error.message || "Internal server error" });
  }
};
 
available
 
import doctorModel from "../models/doctorModel.js";

const changeAvailablity = async (req, res) => {
  try {
    const { docId } = req.body;
    const docData = await doctorModel.findById(docId);
    await doctorModel.findByIdAndUpdate(docId, {
      available: !docData.available,
    });
    res.json({ message: "Availability changed successfully" });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

export { changeAvailablity };

 
const changeAvailablity = async (req, res) => {
  try {
    const { docId } = req.body;
    const docData = await doctorModel.findById(docId);
    await doctorModel.findByIdAndUpdate(docId, {
      available: !docData.available,
    });
    res.json({ message: "Availability changed successfully" });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};
 
 <input onChange={()=>changeAvailability(item.id)} className="mt-2 flex items-center gap-1 text-sm " type="checkbox" checked={item.available}/>
 

  import { useEffect } from 'react';
 

  console.log(setDoctors)
 

        console.log(data.doctors);
 

        console.log(data);
 
data.message
 
data.message
 
const changeAvailablity = async (req, res) => {
  try {
    const { docId } = req.body;
    const docData = await doctorModel.find(docId);
    await doctorModel.findByIdAndUpdate(docId, {
      available: !docData.available,
    });
    res.json({ message: "Availability changed successfully" });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

export { changeAvailablity };
 

      console.log(error);
 
getDocument(docId);
 

        res.status(500).send({message: "Internal Server Error"});
 
{
        doctors.map((item,index) => {
          <div key={index}>
            <img src={item.name} alt="images"/>
          </div>
        })
      }
 

      DoctorList
 
.select("-password")
 

        setExperience("");
 

        setSpeciality("");
 
console.log()
 
data.message
 
backendUrl
 

              <input type="text" placeholder="Experience" required />
 
Fees
 
 type="text" 
 
Doctor Password
 
password
 
Doctor Password
 
password
 
Doctor Password
 
Neurologist
 
Cardiology
 
Cardiology
 
Cardiology
 
Cardiology
 
Cardiology
 
Cardiology
 
ardiology
 
Cardiology
 
Cardiology
 
Cardiology
 
Cardiology
 
Cardiology
 
Your Name
 
0-5
 
Your Name
 
Your Name
 
assests
 

    <div>
      AddDoctor
    </div>
 
 border-r-4
 
all-appointments
 
all-appointments
 
admin-dashboard
 
Dashboard
 
Dashboard
 
All appointment_icon
 
home_icon
 
home_icon
 
? <h1>Logged in</h1> : <h1>Logged
 
<DoctorList>
 
<AddDoctor>
 
<AllAppointments>
 
<Dashboard>
 
"bg-primary"
 
import { createContext, useState } from "react";

export const AdminContext = createContext();
// export const AdminContext = createContext();
const AdminContextProvider = (props) => {
  const [aToken, setAToken] = useState(
    localStorage.getItem("aToken") ? localStorage.getItem("aToken") : ""
  );
  const backendUrl = import.meta.env.VITE_BACKEND_URL;
  const value = {
    aToken,
    setAToken,
    backendUrl,
  };

  return (
    <AdminContext.Provider value={value}>
      {props.children}
    </AdminContext.Provider>
  );
};
// export default AdminContextProvider;
export default AdminContextProvider;

 
ppContext
 

      <Login />
 
const onSubmitHandler = async (event) => {
    event.preventDefault();
    try {
      if (state === "Admin") {
        const { data } = await axios.post(backendUrl + "/api/admin/login", {
          email,
          password,
        });

        if (data.success) {
          localStorage.setItem("aToken", data.token);
          setAToken(data.token);
        }
      } else {
        toast.error(data.message);
        
      }
      console.log(data.message)
    } catch (error) {
      // console.log("error");
    }
  };
 

import { ToastContainer, toast } from 'react-toastify';
 
console.log
 
/api
 
Click
 
setToken(data.token)
 
 const { data } = await axios.post(backendUrl + "/api/admin/login", {
          email,
          password,
        });
 
onClick
 
`${backendUrl}/admin/login`
 
response
 

        const response = await fetch(`${backendUrl}/login`, {
 

        <div></div>
 
AppContext
 
AppContext
 
className='text-2xl text-gray-500'
 

      hello
 
  
      gridTemplateColumns: {
        // Change the name from 'auto' to something that makes sense
        'auto': 'repeat(auto-fill, minmax(200px, 1fr))',
      },
 
colors: {
        primary: "#5f6FFF",
      },
 
/** @type {import('tailwindcss').Config} */
export default {
  content: [],
  theme: {
    extend: {},
  },
  plugins: [],
}


 
Vite + React
 
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

 
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.jsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  )
}

export default App

 
"start": "PORT=3001 react-scripts start"
 

    "start": "react-scripts start",
 
"start": "react-scripts start",
 
{
  "name": "lch-project",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "ajv": "^6.12.6",
    "ajv-keywords": "^3.5.2",
    "axios": "^1.7.9",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.1.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "serve": "vite preview",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "vite": "^6.0.7"
  }
}

 
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
export default defineConfig({
  plugins: [react()]
});

 

    "eject": "react-scripts eject"
 

    "test": "react-scripts test",
 
// Production build
 

    "build": "react-scripts build",
 
"start": "react-scripts start",
 
// Vite development server start karega
 
"scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
 
